/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.MemberOrganization.Member;

import Business.Organization.MemberOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.IndividualWorkRequest;
import Business.WorkQueue.WorkRequest;
import UserInterface.EarnSmile.HelperCompleteProfileJPanel;
import java.awt.CardLayout;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JAI
 */
public class MyRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MyRequestsJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private WorkRequest workrequest;
    private MemberOrganization memberOrganization;

    public MyRequestsJPanel(JPanel userProcessContainer, UserAccount account, MemberOrganization memberOrganization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        workrequest = new WorkRequest();
        populateRequestHistoryTable();
        populateRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequestWorkqueue = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        acceptBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        denyHelpBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRequestWorkqueue1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        completeBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("My Requests");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Pending Requests :");

        tblRequestWorkqueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Short Description", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequestWorkqueue);

        jButton1.setText("View Helper's Profile");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        acceptBtn.setText("Accept Help");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        jButton3.setText("<< Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete Request");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        denyHelpBtn.setText("Deny Help");
        denyHelpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denyHelpBtnActionPerformed(evt);
            }
        });

        tblRequestWorkqueue1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ShortDescription", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblRequestWorkqueue1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Request History");

        completeBtn.setText("Smile and Complete");
        completeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 975, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jButton3)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(completeBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(denyHelpBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(acceptBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(269, 269, 269)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(deleteBtn)
                    .addComponent(acceptBtn)
                    .addComponent(denyHelpBtn)
                    .addComponent(completeBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(jButton3)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblRequestWorkqueue.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblRequestWorkqueue.getValueAt(selectedRow, 0);
            workrequest = request;

            HelperCompleteProfileJPanel requestDescriptionJPanel = new HelperCompleteProfileJPanel(userProcessContainer, account, workrequest);
            userProcessContainer.add("RequestDescriptionJPanel", requestDescriptionJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBtnActionPerformed

        int selectedRow = tblRequestWorkqueue.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblRequestWorkqueue.getValueAt(selectedRow, 0);
            workrequest = request;

            request.setParticipate(true);
            UserAccount ua=request.getReceiver();
            ua.getWorkQueue().getWorkRequestList().add(request);
            request.setStatus("Requestor accepted the providers help");
            /*
        int smiles = workrequest.getSender().getPerson().getSmiles();
        smiles =smiles +10;
        workrequest.getSender().getPerson().setSmiles(smiles);*/
        }
        populateRequestTable();
    }//GEN-LAST:event_acceptBtnActionPerformed

    private void denyHelpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denyHelpBtnActionPerformed

        int selectedRow = tblRequestWorkqueue.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblRequestWorkqueue.getValueAt(selectedRow, 0);
            workrequest = request;
            workrequest.setComplete(false);
            workrequest.setStatus("Denied");
        }

        populateRequestTable();
    }//GEN-LAST:event_denyHelpBtnActionPerformed

    private void completeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblRequestWorkqueue.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblRequestWorkqueue.getValueAt(selectedRow, 0);
            //workrequest = request;
            request.setComplete(true);
            request.setParticipate(false);

            if ((request.getStatus().equals("Requestor accepted the providers help"))) {
                int smile = request.getReceiver().getPerson().getSmiles();
                System.out.println(" Receiverusername");
                request.getReceiver().getPerson().setSmiles(smile+10);
                request.setStatus("Completed");
                request.setComplete(true);

            } else {
                JOptionPane.showMessageDialog(null, "Please accept request first");
                return;
                //System.out.println("Request already completed");
            }
            System.out.println("Total smiles of " + request.getReceiver() + " after increment :" + request.getReceiver().getPerson().getSmiles());

            
            
            
            String timeStamp = new SimpleDateFormat("MM/dd/yyyy").format(Calendar.getInstance().getTime());
            Date currentDate=new Date();
            try {
           
           currentDate=new SimpleDateFormat("MM/dd/yyyy").parse(timeStamp);
 
           } catch (ParseException ex) {
              System.out.println("Resolve date not updated");
             }
            request.setResolveDate(currentDate);

            

        }
        populateRequestTable();
        populateRequestHistoryTable();
    }//GEN-LAST:event_completeBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblRequestWorkqueue.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblRequestWorkqueue.getValueAt(selectedRow, 0);
            //workrequest = request;
            request.setMessage("Deleted");
            request.setDelete(true);
            account.getWorkQueue().removeRequest(request);
//            memberOrganization.getWorkQueue().removeRequest(request);
            
        }
        
        populateRequestTable();
        populateRequestHistoryTable();

    }//GEN-LAST:event_deleteBtnActionPerformed

    public void populateRequestHistoryTable() {
        DefaultTableModel model = (DefaultTableModel) tblRequestWorkqueue1.getModel();
        model.setRowCount(0);
        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {

            if (request.isComplete()) {
                //if(request.getSender().equals(account.getUsername())&& ( !(request.isParticipate()) || (request.isComplete()) ||(request.isParticipate())) ){
                Object[] row = new Object[4];
                row[1] = request.getSender();
                row[0] = ((IndividualWorkRequest) request);
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getPerson().getFirstName();
                row[3] = request.getStatus();
//            row[3] = ((IndividualWorkRequest) request).getHelptype();
//            String result = ((IndividualWorkRequest) request).getHelptype();
//            row[3] = request.getSender();
//            row
                //row[3] = result == null ? "Waiting" : result;

                model.addRow(row);
            }
            //}
        }
    }

    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) tblRequestWorkqueue.getModel();
        model.setRowCount(0);
        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
            //if (!(request.getStatus().equals("Completed"))) {
                // if(request.getSender().equals(account.getUsername())&& !(request.isComplete())){
                if(request.getSender().getUsername().equals(account.getUsername()))// Added newly
                if(request.isParticipate() || !(request.isComplete())){
                Object[] row = new Object[4];
                row[1] = request.getSender();
                row[0] = ((IndividualWorkRequest) request);
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getPerson().getFirstName();
                row[3] = request.getStatus();
//            row[3] = ((IndividualWorkRequest) request).getHelptype();
//            String result = ((IndividualWorkRequest) request).getHelptype();
//            row[3] = request.getSender();
//            row
                //row[3] = result == null ? "Waiting" : result;

                model.addRow(row);
                // }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptBtn;
    private javax.swing.JButton completeBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton denyHelpBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblRequestWorkqueue;
    private javax.swing.JTable tblRequestWorkqueue1;
    // End of variables declaration//GEN-END:variables
}
