/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Company.TeamInitiative.EventCreator;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.InitiativeWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JCheckBox; 
import javax.swing.DefaultCellEditor; 
import javax.swing.JOptionPane;

/**
 *
 * @author JAI
 */
public class GiveSmileToVolunteers extends javax.swing.JPanel {

    /**
     * Creates new form GiveSmileToVolunteers
     */
    private JPanel userProcessContainer;
    private InitiativeWorkRequest initiativeWorkRequest;
    
    GiveSmileToVolunteers(JPanel userProcessContainer, WorkRequest workRequest) {
        initComponents();
        this.initiativeWorkRequest=(InitiativeWorkRequest)workRequest;
        this.userProcessContainer=userProcessContainer;
        
        populateTable();
        btnGiveSmiles.setEnabled(true);
        checkBoxGiveAll.setEnabled(true);
    }
    
    public void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) tblEventVolunteers.getModel();

        model.setRowCount(0);

        for (UserAccount ua : initiativeWorkRequest.getParticipatingUsers().getUserAccountList()) {
            {           
            Object[] row = new Object[5];
            
            row[0] = ua;
            row[1] = ua.getPerson().getFirstName()+" "+ua.getPerson().getLastName();
            row[2] = ua.getPerson().getMblNo();
            row[3] = ua.getPerson().getSmiles();
            row[4] = true;

            model.addRow(row);
         
            }  
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JCheckBox checkBox = new javax.swing.JCheckBox();
        tblEventVolunteers = new javax.swing.JTable();
        btnGiveSmiles = new javax.swing.JButton();
        checkBoxGiveAll = new java.awt.Checkbox();

        setBackground(new java.awt.Color(204, 204, 204));

        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Give Smile to Signed Volunteers");

        tblEventVolunteers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Member Name", "Mobile Number", "Smiles Earned", "Give Smile?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEventVolunteers);
        tblEventVolunteers.getColumn("Give Smile?").setCellEditor(new DefaultCellEditor(checkBox));

        btnGiveSmiles.setText("Give Smile");
        btnGiveSmiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGiveSmilesActionPerformed(evt);
            }
        });

        checkBoxGiveAll.setLabel("Give Smile to All");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkBoxGiveAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGiveSmiles))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(backBtn)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGiveSmiles))
                    .addComponent(checkBoxGiveAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 368, Short.MAX_VALUE)
                .addComponent(backBtn)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ManageMyEventsJPanel manageMyEventsJPanel = (ManageMyEventsJPanel) component;
        manageMyEventsJPanel.populateTable();
        manageMyEventsJPanel.populateCompletedTable();
    }//GEN-LAST:event_backBtnActionPerformed

    private void btnGiveSmilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGiveSmilesActionPerformed
        // TODO add your handling code here:
        if(!checkBoxGiveAll.getState())//If Smiles are NOT to be given to all
        {
            int size= initiativeWorkRequest.getNbrOfPeopleRequired();
            for (int i=0;i<size;i++)
            {
                UserAccount ua=(UserAccount)tblEventVolunteers.getValueAt(i, 0);
                if((Boolean)tblEventVolunteers.getValueAt(i, 4))//If CheckBox is true
                {
                    // Add Smiles to individual
                    
                    int smiles = ua.getPerson().getSmiles();
                    smiles =smiles +10;
                    ua.getPerson().setSmiles(smiles);
                }
            }
        }
        else if(checkBoxGiveAll.getState())
        {
              int size= initiativeWorkRequest.getNbrOfPeopleRequired();
            for (int i=0;i<size;i++)
            {
                UserAccount ua=(UserAccount)tblEventVolunteers.getValueAt(i, 0);
                int smiles = ua.getPerson().getSmiles();
                    smiles =smiles +10;
                    ua.getPerson().setSmiles(smiles);
                
            }      
        }
        
        initiativeWorkRequest.setStatus("Completed");
        
        String timeStamp = new SimpleDateFormat("MM/dd/yyyy").format(Calendar.getInstance().getTime());
        
        try 
        {
            Date resolveDate=new SimpleDateFormat("MM/dd/yyyy").parse(timeStamp);
            initiativeWorkRequest.setResolveDate(resolveDate);           
        } 
        catch (ParseException ex) 
        {
            System.out.println("Error while selecting date of birth");
        }
        
        
        
        btnGiveSmiles.setEnabled(false);
        checkBoxGiveAll.setEnabled(false);
        JOptionPane.showMessageDialog(null, "Event Completed ");
          
    }//GEN-LAST:event_btnGiveSmilesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnGiveSmiles;
    private java.awt.Checkbox checkBoxGiveAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblEventVolunteers;
    // End of variables declaration//GEN-END:variables
}
