/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.EcoSystem;
import Business.ConfigureASystem;
import Business.DB4OUtil.DB4OUtil;
import Business.Enterprise.Enterprise;
import Business.Network.City;
import Business.Network.Network;
import Business.Network.State;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Credentials.Credentials;
import Credentials.CredentialsList;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author JAI
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    private EcoSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private Credentials creds;
    private CredentialsList credsList;

    public MainJFrame() {
        initComponents();
        system = dB4OUtil.retrieveSystem();
        creds = new Credentials();
        credsList = new CredentialsList();
        String captcha = createCaptcha();
        captchaLabel.setText(captcha);
        //captchaLabel.setText(captcha);
    }

    public String createCaptcha() {

        Random random = new Random();
        int length = 7 + (Math.abs(random.nextInt()) % 3);
        StringBuffer captchaBuffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            int basecharacterNumber = (Math.abs(random.nextInt())) % 62;
            int characterNumber = 0;
            if (basecharacterNumber < 26) {
                characterNumber = 65 + basecharacterNumber;
            } else if (basecharacterNumber < 52) {
                characterNumber = 97 + (basecharacterNumber - 26);
            } else {
                characterNumber = 48 + (basecharacterNumber - 52);

            }
            captchaBuffer.append((char) characterNumber);
        }
        return captchaBuffer.toString();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        pwdTxtField = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        registerLabel = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        signinLabel = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        captchaLabel = new javax.swing.JLabel();
        captchaTextField = new javax.swing.JTextField();
        newCaptchaBtn = new javax.swing.JButton();
        quesLabel = new javax.swing.JLabel();
        forgotpwdLabel = new javax.swing.JLabel();
        pwdResetBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        userProcessContainer = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setMinimumSize(new java.awt.Dimension(250, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(250, 600));

        usernameLabel.setBackground(new java.awt.Color(255, 255, 255));
        usernameLabel.setForeground(new java.awt.Color(51, 51, 51));
        usernameLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/icons8_User_Account_48px.png"))); // NOI18N
        usernameLabel.setText("Enter Username :");

        userNameTextField.setBackground(new java.awt.Color(255, 255, 204));

        pwdTxtField.setBackground(new java.awt.Color(255, 255, 255));
        pwdTxtField.setForeground(new java.awt.Color(51, 51, 51));
        pwdTxtField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/icons8_Password_48px.png"))); // NOI18N
        pwdTxtField.setText("Enter Password ");

        passwordTextField.setBackground(new java.awt.Color(255, 255, 204));
        passwordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordTextFieldFocusGained(evt);
            }
        });
        passwordTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwordTextFieldMouseClicked(evt);
            }
        });
        passwordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordTextFieldKeyPressed(evt);
            }
        });

        loginButton.setBackground(new java.awt.Color(255, 255, 255));
        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        registerLabel.setText("New User Registration ->");

        registerButton.setBackground(new java.awt.Color(204, 204, 204));
        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        signinLabel.setBackground(new java.awt.Color(255, 255, 255));
        signinLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        signinLabel.setText("Sign In/ Sign Up ");

        logoutButton.setBackground(new java.awt.Color(255, 255, 255));
        logoutButton.setText("Logout");
        logoutButton.setEnabled(false);
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        captchaLabel.setBackground(new java.awt.Color(51, 51, 51));
        captchaLabel.setFont(new java.awt.Font("Wide Latin", 3, 14)); // NOI18N
        captchaLabel.setForeground(new java.awt.Color(51, 51, 51));
        captchaLabel.setText("jLabel5");

        captchaTextField.setBackground(new java.awt.Color(255, 255, 204));
        captchaTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                captchaTextFieldKeyPressed(evt);
            }
        });

        newCaptchaBtn.setBackground(new java.awt.Color(255, 255, 255));
        newCaptchaBtn.setText("NewCaptcha");
        newCaptchaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCaptchaBtnActionPerformed(evt);
            }
        });

        quesLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        quesLabel.setText("Curious to join Smile as an Individual !?");

        forgotpwdLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        forgotpwdLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/icons8_Password_Reset_48px.png"))); // NOI18N
        forgotpwdLabel.setText("Forgot Password?");

        pwdResetBtn.setBackground(new java.awt.Color(255, 255, 255));
        pwdResetBtn.setText("Reset");
        pwdResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdResetBtnActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/icons8_Home_50px.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(captchaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(registerLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(newCaptchaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(usernameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(pwdTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(passwordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                            .addComponent(userNameTextField)))
                                    .addComponent(captchaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quesLabel)
                            .addComponent(signinLabel)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pwdResetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(forgotpwdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signinLabel)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwdTxtField)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(forgotpwdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pwdResetBtn)
                .addGap(44, 44, 44)
                .addComponent(captchaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(captchaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newCaptchaBtn)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton)
                    .addComponent(logoutButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(quesLabel)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerLabel)
                    .addComponent(registerButton))
                .addGap(107, 107, 107))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        userProcessContainer.setBackground(new java.awt.Color(255, 255, 255));
        userProcessContainer.setPreferredSize(new java.awt.Dimension(650, 600));
        userProcessContainer.setLayout(new java.awt.CardLayout());

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/smilesaround.JPG"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Wide Latin", 0, 24)); // NOI18N
        jLabel2.setText("   SMILES  ");

        jLabel3.setFont(new java.awt.Font("Wide Latin", 0, 18)); // NOI18N
        jLabel3.setText("             --- Beyond Miles ");

        jLabel4.setFont(new java.awt.Font("Wide Latin", 1, 24)); // NOI18N
        jLabel4.setText("Serving Many Individual Lives with Effecctive Solutions");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 21, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );

        userProcessContainer.add(jPanel2, "card2");

        jSplitPane1.setRightComponent(userProcessContainer);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
    

        CreateAccountJPanel registerPanel = new CreateAccountJPanel(userProcessContainer, system);
        userProcessContainer.add("CreateAccount", registerPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
        logoutButton.setEnabled(true);
        userNameTextField.setEnabled(false);
        passwordTextField.setEnabled(false);
        loginButton.setEnabled(false);
        registerButton.setEnabled(false);
        
        userNameTextField.setText("");
        passwordTextField.setText("");

        captchaLabel.setEnabled(false);
        captchaTextField.setEnabled(false);
        newCaptchaBtn.setEnabled(false);
        captchaTextField.setText("");
        
        
        pwdResetBtn.setEnabled(false);
        String captcha = createCaptcha();
        captchaLabel.setText(captcha);
        
    }//GEN-LAST:event_registerButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        logoutButton.setEnabled(false);
        userNameTextField.setEnabled(true);
        passwordTextField.setEnabled(true);
        loginButton.setEnabled(true);
        registerButton.setEnabled(true);
        
        userNameTextField.setText("");
        passwordTextField.setText("");

        captchaLabel.setEnabled(true);
        captchaTextField.setEnabled(true);
        newCaptchaBtn.setEnabled(true);
        captchaTextField.setText("");

        String captcha = createCaptcha();
        captchaLabel.setText(captcha);
        pwdResetBtn.setEnabled(true);
        
       // usernameLabel.setEnabled(false);
       // pwdTxtField.setEnabled(false);
        
        userProcessContainer.removeAll();
        JPanel blankJP = new JPanel();
        userProcessContainer.add("blank", blankJP);
        CardLayout crdLyt = (CardLayout) userProcessContainer.getLayout();
        crdLyt.next(userProcessContainer);
        dB4OUtil.storeSystem(system);
   
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        String userName = userNameTextField.getText();
        // Get Password
        
        char[] passwordCharArray = passwordTextField.getPassword();
        String password = String.valueOf(passwordCharArray);
        

        //Step1: Check in the system user account directory if you have the user
        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);
        Enterprise inEnterprise = null;
        Organization inOrganization = null;
        if (userAccount == null) {
            //Step2: Go inside each network to check each enterprise
            for (Network network : system.getNetworkList()) {
                //Step 2-a: Check against each enterprise
                // for (Country country : network.getCountryDirectory().getCountryList()) {
                for (State state : network.getStateDirectory().getStateList()) {
                    for (City city : state.getCityDirectory().getCityList()) {
                        for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                            userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount == null) {
                                //Step3: Check against each organization inside that enterprise
                                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                    if (userAccount != null) {
                                        inEnterprise = enterprise;
                                        inOrganization = organization;
                                        break;
                                    }
                                }
                            } else {
                                inEnterprise = enterprise;
                                break;
                            }
                            if (inOrganization != null) {
                                break;
                            }
                        }
                    }
                }
                //}
                if (inEnterprise != null) {
                    break;
                }
            }
        }

        if (userAccount == null) {
            JOptionPane.showMessageDialog(null, "Invalid Credentails!");
            return;
        } else {
            if (captchaTextField.getText().equalsIgnoreCase(captchaLabel.getText())) 
            {
            
                Credentials cre =  credsList.addCredential();
                cre.setPassword(password);
                cre.setUsername(userName);


                
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                userProcessContainer.add("workArea", userAccount.getRole().createWorkArea(userProcessContainer, userAccount, inOrganization, inEnterprise, system));
                layout.next(userProcessContainer);

                loginButton.setEnabled(false);
                logoutButton.setEnabled(true);
                userNameTextField.setEnabled(false);
                passwordTextField.setEnabled(false);
                
                captchaTextField.setText("");
                captchaTextField.setEnabled(false);
                newCaptchaBtn.setEnabled(false);
                captchaLabel.setText("");
                
                registerButton.setEnabled(false);
                pwdResetBtn.setEnabled(false);
            }
           else {
          
               JOptionPane.showMessageDialog(null, "Enter the correct Captcha");
            }

        }

    }//GEN-LAST:event_loginButtonActionPerformed

    private void passwordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordTextFieldKeyPressed
        // TODO add your handling code here:

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            String userName = userNameTextField.getText();
            // Get Password
            char[] passwordCharArray = passwordTextField.getPassword();
            String password = String.valueOf(passwordCharArray);

            //Step1: Check in the system user account directory if you have the user
            UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);
            Enterprise inEnterprise = null;
            Organization inOrganization = null;
            if (userAccount == null) {
                //Step2: Go inside each network to check each enterprise
                for (Network network : system.getNetworkList()) {
                    //Step 2-a: Check against each enterprise
                    // for (Country country : network.getCountryDirectory().getCountryList()) {
                    for (State state : network.getStateDirectory().getStateList()) {
                        for (City city : state.getCityDirectory().getCityList()) {
                            for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                                userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                                if (userAccount == null) {
                                    //Step3: Check against each organization inside that enterprise
                                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                        userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                        if (userAccount != null) {
                                            inEnterprise = enterprise;
                                            inOrganization = organization;
                                            break;
                                        }
                                    }
                                } else {
                                    inEnterprise = enterprise;
                                    break;
                                }
                                if (inOrganization != null) {
                                    break;
                                }
                            }
                        }
                    }
                    //}
                    if (inEnterprise != null) {
                        break;
                    }
                }
            }

            if (userAccount == null) {
                JOptionPane.showMessageDialog(null, "Invalid Credentails!");
                return;
            } else {

                if (captchaTextField.getText().equalsIgnoreCase(captchaLabel.getText())) {
                    System.out.println(captchaTextField.getText());
                    System.out.println(captchaLabel.getText());
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    userProcessContainer.add("workArea", userAccount.getRole().createWorkArea(userProcessContainer, userAccount, inOrganization, inEnterprise, system));
                    layout.next(userProcessContainer);

                    loginButton.setEnabled(false);
                    logoutButton.setEnabled(true);
                    userNameTextField.setEnabled(false);
                    passwordTextField.setEnabled(false);
                    captchaLabel.setEnabled(false);
                    captchaTextField.setEnabled(false);
                    newCaptchaBtn.setEnabled(false);

                } else {
                    JOptionPane.showMessageDialog(null, "Invalid Captcha");
                }
//        loginButton.setEnabled(false);
//        logoutButton.setEnabled(true);
//        userNameTextField.setEnabled(false);
//        passwordTextField.setEnabled(false);

            }
    }//GEN-LAST:event_passwordTextFieldKeyPressed
    }
    private void newCaptchaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCaptchaBtnActionPerformed
        String captcha = createCaptcha();
        captchaLabel.setText(captcha);
        captchaTextField.setText("");
    }//GEN-LAST:event_newCaptchaBtnActionPerformed

    private void captchaTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_captchaTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            String userName = userNameTextField.getText();
            // Get Password
            char[] passwordCharArray = passwordTextField.getPassword();
            String password = String.valueOf(passwordCharArray);

            //Step1: Check in the system user account directory if you have the user
            UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);
            Enterprise inEnterprise = null;
            Organization inOrganization = null;
            if (userAccount == null) {
                //Step2: Go inside each network to check each enterprise
                for (Network network : system.getNetworkList()) {
                    //Step 2-a: Check against each enterprise
                    // for (Country country : network.getCountryDirectory().getCountryList()) {
                    for (State state : network.getStateDirectory().getStateList()) {
                        for (City city : state.getCityDirectory().getCityList()) {
                            for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                                userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                                if (userAccount == null) {
                                    //Step3: Check against each organization inside that enterprise
                                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                        userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                        if (userAccount != null) {
                                            inEnterprise = enterprise;
                                            inOrganization = organization;
                                            break;
                                        }
                                    }
                                } else {
                                    inEnterprise = enterprise;
                                    break;
                                }
                                if (inOrganization != null) {
                                    break;
                                }
                            }
                        }
                    }
                    //}
                    if (inEnterprise != null) {
                        break;
                    }
                }
            }

            if (userAccount == null) {
                JOptionPane.showMessageDialog(null, "Invalid Credentails!");
                return;
            } else {

                if (captchaTextField.getText().equalsIgnoreCase(captchaLabel.getText())) {
                    
                    Credentials cre =  credsList.addCredential();
                    cre.setPassword(password);
                    cre.setUsername(userName);
                    
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    userProcessContainer.add("workArea", userAccount.getRole().createWorkArea(userProcessContainer, userAccount, inOrganization, inEnterprise, system));
                    layout.next(userProcessContainer);

                    loginButton.setEnabled(false);
                    logoutButton.setEnabled(true);
                    userNameTextField.setEnabled(false);
                    passwordTextField.setEnabled(false);
                    captchaLabel.setEnabled(false);
                    captchaTextField.setEnabled(false);
                    newCaptchaBtn.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid Captcha");
                }

            }
        }
    }//GEN-LAST:event_captchaTextFieldKeyPressed

    private void pwdResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdResetBtnActionPerformed
         
         String username = userNameTextField.getText();
         ResetPwdJPanel resetPanel = new ResetPwdJPanel(userProcessContainer,system,username);
         userProcessContainer.add("ResetPwdJPanel", resetPanel);
         CardLayout layout = (CardLayout) userProcessContainer.getLayout();
         layout.next(userProcessContainer);
         
                    loginButton.setEnabled(false);
                    logoutButton.setEnabled(true);
                    userNameTextField.setEnabled(false);
                    passwordTextField.setEnabled(false);
                    captchaLabel.setEnabled(false);
                    captchaTextField.setEnabled(false);
                    newCaptchaBtn.setEnabled(false);
                    registerButton.setEnabled(false);
                    registerLabel.setEnabled(false);
                    quesLabel.setEnabled(false);
                    forgotpwdLabel.setEnabled(false);
//                    pwdTxtField.setEnabled(false);
//                    usernameLabel.setEnabled(false);
//                    signinLabel.setEnabled(false);
         
         
    }//GEN-LAST:event_pwdResetBtnActionPerformed

    private void passwordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordTextFieldFocusGained
        // TODO add your handling code here:
       String user =userNameTextField.getText();
        for(Credentials cc : credsList.getCredentialList())
        {
            if(cc.getUsername().equalsIgnoreCase(user))
            {
                passwordTextField.setText(cc.getPassword());
            }
        } 
        
    }//GEN-LAST:event_passwordTextFieldFocusGained

    private void passwordTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordTextFieldMouseClicked
        // TODO add your handling code here:
           String user =userNameTextField.getText();
        for(Credentials cc : credsList.getCredentialList())
        {
            if(cc.getUsername().equalsIgnoreCase(user))
            {
                passwordTextField.setText(cc.getPassword());
            }
        } 
    }//GEN-LAST:event_passwordTextFieldMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel captchaLabel;
    private javax.swing.JTextField captchaTextField;
    private javax.swing.JLabel forgotpwdLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton newCaptchaBtn;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton pwdResetBtn;
    private javax.swing.JLabel pwdTxtField;
    private javax.swing.JLabel quesLabel;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel registerLabel;
    private javax.swing.JLabel signinLabel;
    private javax.swing.JTextField userNameTextField;
    private javax.swing.JPanel userProcessContainer;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
